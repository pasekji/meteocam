#!/bin/bash

# FTP login attributes and paths 		
currentFolder=$1										# Zde prosím nastavte plnou cestu, která vede do nynějšího umístění MeteoCam scriptů.
pathToPictures=$2										# Zde prosím nastavte plnou cestu do adresářové struktury Pictures.
userName=$3												# Zde si prosím nastavte uživatelské jméno pro přístup k FTP serveru.
password=$4												# Zde si prosím nastavte heslo pro přístup k uživatelskému účtu na FTP serveru.
domain=$5												# Zde prosím nastavte název vaší domény např. google.com .
destinationFolder=$6									# Zde prosím určete, do jakého adresáře se na zvoleném FTP serveru budou ukládat nově pořízené animace. 
targetDirectory=$7										# Zde prosím nastavte ID cílové složky na Google drive. 
directory=($pathToPictures/Pictures-hist1/)				# Zdrojový adresář, ze kterého jsou snímky brány pro účely tohoto scriptu.

# Nekončící cyklus 
for (( ; ; ))
do
	takes=10													# Počáteční hodnota průchodu
	copy=12														# Počáteční hodnota přemisťovacího cyklu
	firstAddValue=40											# Hodnota, které je přičítána po prvním průchodu přemisťovacího cyklu.
	secondAddValue=80											# Hodnota, které je přičítána po druhém průchodu přemisťovacího cyklu.
	frequency=90												# Počet sekund, po kterých se bude načítat nový snímek do adresáře pro animaci. 
	echo "Taking images from $directory directory."
	while [ $takes -lt 51 ];									# Cyklus, který postupně načítá snímky z předchozího adrešáře. 
	do 
		sleep $frequency 										
		if [ $(ls -A "$directory" | wc -l) -gt 0 ]; then		# Podmínka, která se ptá, zdali adresář obsahuje nějaké soubory. 
			cd $directory			
			convert $(ls -1t | head -1) -resize 640x480! $pathToPictures/Pictures-anim/Pictures-anim1h/$takes'.jpg'		# Zde se bere vždy nejnovější snímek z předchozího adresáře, převede do adresáře pro animaci v rozlišení 640x480, které je nejvhodnější pro tvorbu samotné animace.
			echo "New image has been added to the animation!"
			mv $pathToPictures/Pictures-hist1/*'.jpg' $pathToPictures/Pictures-hist2/			# Již převedené snímky se přesouvají do konečného adresáře.
			let takes=takes+1
		
		else
			echo "There are no files!"
		fi
		
	done
		# Po dosažení dostatečného počtu snímků v adresáři pro animaci se pokračuje v samotné tvorbě animace. 
		DT=$(date '+%Y%m%d%H%M%S')								# Tato proměnná vyjadřuje nynější datum a čas. 
		convert -morph 1 -delay 8 $pathToPictures/Pictures-anim/Pictures-anim1h/{10..50}.jpg $pathToPictures/Pictures-anim/Pictures-anim-final/Pictures-anim1h/$DT.gif	# Tímto příkazem se již generuje samotná animace. Parametrem -morph zvolíme morfologickou image porccessing metodu, která zajistí méně nedokonalostí oproti ostatním metodám. Parametr -delay určuje, po jaké době má být zobrazen další snímek(ms). Dále je zde definováno rozhraní snímků, které budou jako vstup pro tvorbu. Poslední atribut vyjadřuje již cestu k výstupnímu souboru. 
		echo "New animation: $DT.gif is ready!"
		cd $pathToPictures/Pictures-anim/Pictures-anim-final/Pictures-anim1h
		$currentFolder/cam-anim-up-1hour "$DT" $pathToPictures $targetDirectory $userName $password $domain $destinationFolder & 				# Spuštění subprocesu pro nahrání animace do Gdrive archivu. 
		
		# Zde můžete v případě potřeby přesouvat již hotové animace do archivu, pro povolení této funkce prosím odstraňte křížky v následujících 2 řádcích.  
		# mv $pathToPictures/Pictures-anim/Pictures-anim-final/Pictures-anim1h/"$DT.gif" $pathToPictures/Pictures-anim/Pictures-anim-old/Pictures-anim1h/
		# echo "File $DT.gif has been moved to the archieve!"

	# Následující cyklus přesouvá snímky z adresáře s již vytvořenou animací. Z hodinové do tříhodinové struktury je přesouván každý druhý snímek postupně ve 3 jednotlivých vlnách.     
	while [ $copy -lt 51 ];
		do
		  if [ -e $pathToPictures/Pictures-anim/Pictures-anim3h/"$copy.jpg" ]; then					# Zde se ptáme, zdali již byla někdy provedena první vlna přesunu. Pokud ano, přičítá se k číselné hodnotě snímku další číselná hodnota. Takto předcházíme duplikaci názvů snímků v adresáři.
			let firstDuplicate=$(($copy + $firstAddValue))
		  if [ -e $pathToPictures/Pictures-anim/Pictures-anim3h/"$firstDuplicate.jpg" ]; then		# Zde se ptáme, zdali již byla někdy provedena druhá vlna přesunu. Pokud ano, přičítá se k číselné hodnotě snímku druhé vlny další číselná hodnota. Takto předcházíme duplikaci názvů snímků v adresáři.
			let secondDuplicate=$(($copy + $secondAddValue))
			mv $pathToPictures/Pictures-anim/Pictures-anim1h/"$copy.jpg" $pathToPictures/Pictures-anim/Pictures-anim3h/"$secondDuplicate.jpg"
			echo "New picture: $copy.jpg has been moved to the next level animation directory as: $secondDuplicate.jpg!"
		  fi
			mv $pathToPictures/Pictures-anim/Pictures-anim1h/"$copy.jpg" $pathToPictures/Pictures-anim/Pictures-anim3h/"$firstDuplicate.jpg"
			echo "New picture: $copy.jpg has been moved to the next level animation directory as: $firstDuplicate.jpg!"
		  else
			mv $pathToPictures/Pictures-anim/Pictures-anim1h/"$copy.jpg" $pathToPictures/Pictures-anim/Pictures-anim3h/
			echo "New picture: $copy.jpg has been moved to the next level animation directory as: $copy.jpg!"
		  fi
			let copy=copy+2																# Z hodinové do tříhodinové struktury je přesouván každý druhý snímek. 
		  done
		  rm -r $pathToPictures/Pictures-anim/Pictures-anim1h/*.'jpg' 					# Po přesunu všech potřebných snímků do dalšího adresáře jsou veškeré ostatní snímky z hodinového adresáře odstraněny. 
		  echo "Unnecessary pictures has been removed!" 
		
done
 